@require: gr
@require: color

module Uline : sig

  val make-uline     : length -> color -> deco-set
  val make-uuline    : length -> color -> deco-set
  val make-sout      : length -> color -> deco-set
  val make-dashuline : length -> color -> deco-set
  val make-dotuline  : length -> color -> deco-set
  val make-uwave     : length -> color -> deco-set

  direct \uline     : [color?; inline-text] inline-cmd
  direct \uuline    : [color?; inline-text] inline-cmd
  direct \sout      : [color?; inline-text] inline-cmd
  direct \dashuline : [color?; inline-text] inline-cmd
  direct \dotuline  : [color?; inline-text] inline-cmd
  direct \uwave     : [color?; inline-text] inline-cmd

end = struct

% 線の太さ -> 線の色 -> deco-set
% length -> color -> deco-set
let make-uline t color =
  let strokef = stroke t color in
  let space = t +' 1.0pt in
  let deco (x, y) w h d =
    [
      strokef (Gr.line (x, y -' d -' space) (x +' w, y -' d -' space))
    ]
  in
    (deco, deco, deco, deco)


% length -> color -> deco-set
let make-uuline t color =
  let strokef = stroke t color in
  let space = t +' 1.0pt in
  let deco (x, y) w h d =
    [
      strokef (Gr.line (x, y -' d) (x +' w, y -' d));
      strokef (Gr.line (x, y -' d -' space) (x +' w, y -' d -' space))
    ]
  in
    (deco, deco, deco, deco)


% length -> color -> deco-set
let make-sout t color =
  let strokef = stroke t color in
  let deco (x, y) w h d =
    [
      strokef (Gr.line (x, y +' h *' 0.5) (x +' w, y +' h *' 0.5))
    ]
  in
    (deco, deco, deco, deco)


% length -> color -> deco-set
let make-dashuline t color =
  let dash = (3pt, 2pt, 0pt) in % 横の長さ, 線と線の間, 最初の余白
  let strokef = dashed-stroke t dash color in
  let space = t +' 1.0pt in
  let deco (x, y) w h d =
    [
      strokef (Gr.line (x, y -' d -' space) (x +' w, y -' d -' space))
    ]
  in
    (deco, deco, deco, deco)


% length -> color -> deco-set
let make-dotuline t color =
  let dash = (t, t *' 3.0, 0pt) in % 横の長さ, 線と線の間, 最初の余白
  let strokef = dashed-stroke t dash color in
  let space = t +' 1.0pt in
  let deco (x, y) w h d =
    [
      strokef (Gr.line (x, y -' d -' space) (x +' w, y -' d -' space))
    ]
  in
    (deco, deco, deco, deco)


% length -> color -> deco-set
let make-uwave t color =
  let curve-size = t *' 2.0 in
  let strokef = stroke t color in
  let space = t +' 1.0pt in
  let-rec make-bezier-point w old-pt pre-path =
    if w <' curve-size then
      terminate-path pre-path
    else
      let (old-x, old-y) = old-pt in
      let new-x = old-x +' curve-size in
      let new-y =
        if old-y >' 0pt then
          (curve-size *' 0.5) *' (float (-1))
        else
          curve-size *' 0.5
      in
      let new-pt = (new-x, new-y) in
      let pre-path =
        bezier-to
          new-pt
          new-pt
          (new-x +' (curve-size *' 0.5),0pt)
          pre-path
      in
      make-bezier-point (w -' curve-size) new-pt pre-path
  in
  let deco (x, y) w h d =
    let gr =
      strokef (make-bezier-point w (0pt,0pt) (start-path (0pt,0pt)))
    in
    [
      shift-graphics (x,y) gr
    ]
  in
    (deco, deco, deco, deco)


let default-color = Color.black

let-inline ctx \uline ?:color-opt it =
  let color =
    match color-opt with
    | None -> get-text-color ctx
    | Some(c) -> c
  in
  let t = 0.5pt in
  let ib = read-inline ctx it in
  let deco-set = make-uline t color in
  let pads = (0pt, 0pt, 0pt, 0pt) in
    inline-frame-breakable pads deco-set ib


let-inline ctx \uuline ?:color-opt it =
  let color =
    match color-opt with
    | None -> get-text-color ctx
    | Some(c) -> c
  in
  let t = 0.5pt in
  let ib = read-inline ctx it in
  let deco-set = make-uuline t color in
  let pads = (0pt, 0pt, 0pt, 0pt) in
    inline-frame-breakable pads deco-set ib


let-inline ctx \sout ?:color-opt it =
  let color =
    match color-opt with
    | None -> get-text-color ctx
    | Some(c) -> c
  in
  let t = 0.5pt in
  let ib = read-inline ctx it in
  let deco-set = make-sout t color in
  let pads = (0pt, 0pt, 0pt, 0pt) in
    inline-frame-breakable pads deco-set ib


let-inline ctx \dashuline ?:color-opt it =
  let color =
    match color-opt with
    | None -> get-text-color ctx
    | Some(c) -> c
  in
  let t = 0.5pt in
  let ib = read-inline ctx it in
  let deco-set = make-dashuline t color in
  let pads = (0pt, 0pt, 0pt, 0pt) in
    inline-frame-breakable pads deco-set ib


let-inline ctx \dotuline ?:color-opt it =
  let color =
    match color-opt with
    | None -> get-text-color ctx
    | Some(c) -> c
  in
  let t = 1pt in
  let ib = read-inline ctx it in
  let deco-set = make-dotuline t color in
  let pads = (0pt, 0pt, 0pt, 0pt) in
    inline-frame-breakable pads deco-set ib


let-inline ctx \uwave ?:color-opt it =
  let color =
    match color-opt with
    | None -> get-text-color ctx
    | Some(c) -> c
  in
  let t = 0.8pt in
  let ib = read-inline ctx it in
  let deco-set = make-uwave t color in
  let pads = (0pt, 0pt, 0pt, 0pt) in
    inline-frame-breakable pads deco-set ib

end
